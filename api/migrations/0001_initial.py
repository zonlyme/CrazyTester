# Generated by Django 2.1.3 on 2021-10-26 16:44

from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='ApiApi',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='标题', max_length=100, verbose_name='标题')),
                ('isDelete', models.BooleanField(default=False, help_text='逻辑删除', verbose_name='逻辑删除')),
                ('create_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人')),
                ('create_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人id')),
                ('latest_update_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者名称')),
                ('latest_update_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者id')),
                ('c_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('u_date', models.DateTimeField(auto_now=True, null=True, verbose_name='修改时间')),
                ('desc', models.CharField(blank=True, max_length=500, null=True, verbose_name='API描述')),
                ('method', models.CharField(max_length=100, verbose_name='请求方式')),
                ('params_example', models.TextField(blank=True, null=True, verbose_name='请求参数示例&解释')),
                ('res_body_example', models.TextField(blank=True, null=True, verbose_name='响应体示例')),
            ],
            options={
                'verbose_name': '接口数据',
                'verbose_name_plural': '接口数据',
                'db_table': 'api_api',
            },
            managers=[
                ('m', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ApiCase',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='标题', max_length=100, verbose_name='标题')),
                ('isDelete', models.BooleanField(default=False, help_text='逻辑删除', verbose_name='逻辑删除')),
                ('create_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人')),
                ('create_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人id')),
                ('latest_update_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者名称')),
                ('latest_update_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者id')),
                ('c_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('u_date', models.DateTimeField(auto_now=True, null=True, verbose_name='修改时间')),
                ('status', models.BooleanField(default=True, verbose_name='是否启用')),
                ('desc', models.CharField(max_length=100, null=True, verbose_name='用例描述')),
                ('url', models.CharField(max_length=500, verbose_name='请求地址')),
                ('params', models.TextField(help_text='get时 params与data合并,params.update(data)', null=True, verbose_name='请求参数')),
                ('data', models.TextField(help_text='post时 params拼到url,data作为数据', null=True, verbose_name='请求体')),
                ('sample_data', models.TextField(help_text='测试样例数据,分别格式化到params和data上', null=True, verbose_name='样例数据')),
                ('headers', models.TextField(null=True, verbose_name='请求头')),
                ('cookies', models.TextField(null=True, verbose_name='cookies')),
                ('asserts', models.TextField(null=True, verbose_name='断言')),
                ('prefix', models.TextField(null=True, verbose_name='前置操作')),
                ('rsgv', models.TextField(null=True, verbose_name='响应体中的参数设置到全局变量')),
                ('rsgh', models.TextField(null=True, verbose_name='响应体中的参数设置到全局请求头')),
                ('set_global_cookies', models.BooleanField(default=True, verbose_name='响应cookies全部设置到当前全局cookies中')),
                ('clear_global_cookies', models.BooleanField(default=True, verbose_name='清空全局cookies')),
                ('api', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.ApiApi')),
            ],
            options={
                'verbose_name': '用例数据',
                'verbose_name_plural': '用例数据',
                'db_table': 'api_case',
            },
            managers=[
                ('m', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ApiGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='标题', max_length=100, verbose_name='标题')),
                ('isDelete', models.BooleanField(default=False, help_text='逻辑删除', verbose_name='逻辑删除')),
                ('create_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人')),
                ('create_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人id')),
                ('latest_update_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者名称')),
                ('latest_update_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者id')),
                ('c_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('u_date', models.DateTimeField(auto_now=True, null=True, verbose_name='修改时间')),
            ],
            options={
                'verbose_name': '分组',
                'verbose_name_plural': '分组',
                'db_table': 'api_group',
            },
            managers=[
                ('m', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ApiProject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='标题', max_length=100, verbose_name='标题')),
                ('isDelete', models.BooleanField(default=False, help_text='逻辑删除', verbose_name='逻辑删除')),
                ('create_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人')),
                ('create_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人id')),
                ('latest_update_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者名称')),
                ('latest_update_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者id')),
                ('c_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('u_date', models.DateTimeField(auto_now=True, null=True, verbose_name='修改时间')),
                ('desc', models.CharField(blank=True, max_length=100, null=True, verbose_name='描述')),
                ('version', models.CharField(blank=True, max_length=100, null=True, verbose_name='版本号')),
                ('users', models.CharField(blank=True, max_length=1000, null=True, verbose_name='可见用户')),
            ],
            options={
                'verbose_name': '项目',
                'verbose_name_plural': '项目',
                'db_table': 'api_project',
            },
            managers=[
                ('m', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ApiUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='标题', max_length=100, verbose_name='标题')),
                ('isDelete', models.BooleanField(default=False, help_text='逻辑删除', verbose_name='逻辑删除')),
                ('create_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人')),
                ('create_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人id')),
                ('latest_update_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者名称')),
                ('latest_update_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者id')),
                ('c_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('u_date', models.DateTimeField(auto_now=True, null=True, verbose_name='修改时间')),
                ('type_id', models.CharField(max_length=100, verbose_name='类型id')),
                ('type', models.CharField(blank=True, max_length=100, null=True, verbose_name='类型描述')),
                ('users_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='用户id')),
                ('users', models.CharField(blank=True, max_length=100, null=True, verbose_name='用户名')),
            ],
            options={
                'verbose_name': '用户权限配置',
                'verbose_name_plural': '用户权限配置',
                'db_table': 'api_user',
            },
            managers=[
                ('m', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='EmailUserGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='标题', max_length=100, verbose_name='标题')),
                ('isDelete', models.BooleanField(default=False, help_text='逻辑删除', verbose_name='逻辑删除')),
                ('create_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人')),
                ('create_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人id')),
                ('latest_update_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者名称')),
                ('latest_update_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者id')),
                ('c_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('u_date', models.DateTimeField(auto_now=True, null=True, verbose_name='修改时间')),
                ('params', models.TextField(blank=True, help_text='例：123@qq.com,456@qq.com', null=True, verbose_name='邮箱用户列表')),
            ],
            options={
                'verbose_name': '邮箱用户组配置',
                'verbose_name_plural': '邮箱用户组配置',
                'db_table': 'email_user_group',
            },
            managers=[
                ('m', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='GlobalCookie',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='标题', max_length=100, verbose_name='标题')),
                ('isDelete', models.BooleanField(default=False, help_text='逻辑删除', verbose_name='逻辑删除')),
                ('create_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人')),
                ('create_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人id')),
                ('latest_update_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者名称')),
                ('latest_update_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者id')),
                ('c_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('u_date', models.DateTimeField(auto_now=True, null=True, verbose_name='修改时间')),
                ('params', models.TextField(blank=True, null=True, verbose_name='json格式cookie参数')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='api.ApiProject', verbose_name='所属项目')),
            ],
            options={
                'verbose_name': '全局cookie',
                'verbose_name_plural': '全局cookie',
                'db_table': 'api_global_cookie',
            },
            managers=[
                ('m', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='GlobalEnv',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='标题', max_length=100, verbose_name='标题')),
                ('isDelete', models.BooleanField(default=False, help_text='逻辑删除', verbose_name='逻辑删除')),
                ('create_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人')),
                ('create_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人id')),
                ('latest_update_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者名称')),
                ('latest_update_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者id')),
                ('c_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('u_date', models.DateTimeField(auto_now=True, null=True, verbose_name='修改时间')),
                ('default_uses', models.BooleanField(default=False, verbose_name='默认使用')),
                ('global_cookie', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='api.GlobalCookie', verbose_name='全局cookie')),
            ],
            options={
                'verbose_name': '全局环境',
                'verbose_name_plural': '全局环境',
                'db_table': 'api_global_env',
            },
            managers=[
                ('m', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='GlobalHeader',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='标题', max_length=100, verbose_name='标题')),
                ('isDelete', models.BooleanField(default=False, help_text='逻辑删除', verbose_name='逻辑删除')),
                ('create_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人')),
                ('create_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人id')),
                ('latest_update_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者名称')),
                ('latest_update_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者id')),
                ('c_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('u_date', models.DateTimeField(auto_now=True, null=True, verbose_name='修改时间')),
                ('params', models.TextField(blank=True, null=True, verbose_name='josn格式请求头参数')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='api.ApiProject', verbose_name='所属项目')),
            ],
            options={
                'verbose_name': '全局请求头',
                'verbose_name_plural': '全局请求头',
                'db_table': 'api_global_header',
            },
            managers=[
                ('m', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='GlobalHost',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='标题', max_length=100, verbose_name='标题')),
                ('isDelete', models.BooleanField(default=False, help_text='逻辑删除', verbose_name='逻辑删除')),
                ('create_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人')),
                ('create_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人id')),
                ('latest_update_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者名称')),
                ('latest_update_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者id')),
                ('c_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('u_date', models.DateTimeField(auto_now=True, null=True, verbose_name='修改时间')),
                ('host', models.CharField(blank=True, max_length=100, null=True, verbose_name='域名')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='api.ApiProject', verbose_name='所属项目')),
            ],
            options={
                'verbose_name': '全局域名',
                'verbose_name_plural': '全局域名',
                'db_table': 'api_global_host',
            },
            managers=[
                ('m', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='GlobalVariable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='标题', max_length=100, verbose_name='标题')),
                ('isDelete', models.BooleanField(default=False, help_text='逻辑删除', verbose_name='逻辑删除')),
                ('create_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人')),
                ('create_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人id')),
                ('latest_update_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者名称')),
                ('latest_update_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者id')),
                ('c_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('u_date', models.DateTimeField(auto_now=True, null=True, verbose_name='修改时间')),
                ('params', models.TextField(blank=True, null=True, verbose_name='json格式全局变量')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='api.ApiProject', verbose_name='所属项目')),
            ],
            options={
                'verbose_name': '全局变量',
                'verbose_name_plural': '全局变量',
                'db_table': 'api_global_variable',
            },
            managers=[
                ('m', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ReportForm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='标题', max_length=100, verbose_name='标题')),
                ('isDelete', models.BooleanField(default=False, help_text='逻辑删除', verbose_name='逻辑删除')),
                ('create_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人')),
                ('create_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人id')),
                ('latest_update_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者名称')),
                ('latest_update_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者id')),
                ('c_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('u_date', models.DateTimeField(auto_now=True, null=True, verbose_name='修改时间')),
                ('env', models.CharField(choices=[('测试环境', '测试环境'), ('线上环境', '线上环境')], default='POST', max_length=100, verbose_name='执行导出地址 请求方式')),
                ('sync_type', models.CharField(choices=[('1', '同步下载'), ('2', '异步下载')], default='1', max_length=100, verbose_name='同步类型')),
                ('execute_export_url', models.CharField(max_length=100, verbose_name='执行导出 地址')),
                ('execute_export_method', models.CharField(choices=[('GET', 'GET'), ('POST', 'POST')], default='POST', max_length=100, verbose_name='执行导出 请求方式')),
                ('execute_export_params', models.TextField(help_text='json格式', null=True, verbose_name='执行导出 请求参数')),
                ('start_line', models.CharField(default='2', max_length=100, verbose_name='从第x行开始对比')),
                ('sql', models.TextField(verbose_name='sql对比语句')),
                ('config', models.TextField(default='\n        {\n            "千丁云账号": "",\n            "千丁云密码": "",\n            "千丁云验证码": "6666",\n            "数据库地址":"",\n            "数据库用户":"root",\n            "数据库密码":"",\n            "数据库使用库":"",\n            "数据库端口":"3306"\n        }\n    ', verbose_name='数据库配置')),
                ('project', models.ForeignKey(default='1', on_delete=django.db.models.deletion.PROTECT, to='api.ApiProject')),
            ],
            options={
                'verbose_name': '报表自动化对比',
                'verbose_name_plural': '报表自动化对比',
                'db_table': 'api_report_form',
            },
            managers=[
                ('m', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ReportFormResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='标题', max_length=100, verbose_name='标题')),
                ('isDelete', models.BooleanField(default=False, help_text='逻辑删除', verbose_name='逻辑删除')),
                ('create_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人')),
                ('create_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人id')),
                ('latest_update_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者名称')),
                ('latest_update_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者id')),
                ('c_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('u_date', models.DateTimeField(auto_now=True, null=True, verbose_name='修改时间')),
                ('task_id', models.CharField(help_text='关联测试任务id', max_length=100, null=True, verbose_name='关联测试任务id')),
                ('env', models.CharField(max_length=100, null=True, verbose_name='测试环境')),
                ('sync_type', models.CharField(max_length=100, null=True, verbose_name='同步类型')),
                ('trigger_way', models.CharField(max_length=100, null=True, verbose_name='同步类型')),
                ('db_data', models.TextField(null=True, verbose_name='数据库数据')),
                ('form_data', models.TextField(null=True, verbose_name='表数据')),
                ('file_path', models.CharField(max_length=500, null=True, verbose_name='文件相对地址')),
                ('log', models.TextField(null=True, verbose_name='日志')),
                ('error_msg', models.CharField(max_length=500, verbose_name='错误信息')),
                ('test_ret', models.BooleanField(verbose_name='测试结果')),
                ('report_form', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='api.ReportForm', verbose_name='所属报表')),
            ],
            options={
                'verbose_name': '报表自动化对比结果',
                'verbose_name_plural': '报表自动化对比结果',
                'db_table': 'api_report_form_result',
            },
            managers=[
                ('m', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='RFTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='标题', max_length=100, verbose_name='标题')),
                ('isDelete', models.BooleanField(default=False, help_text='逻辑删除', verbose_name='逻辑删除')),
                ('create_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人')),
                ('create_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人id')),
                ('latest_update_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者名称')),
                ('latest_update_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者id')),
                ('c_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('u_date', models.DateTimeField(auto_now=True, null=True, verbose_name='修改时间')),
                ('task_desc', models.CharField(max_length=500, verbose_name='测试任务描述')),
                ('rf_ids', models.CharField(max_length=1000, null=True, verbose_name='分组id')),
                ('cron', models.CharField(max_length=100, null=True, verbose_name='cron表达式')),
                ('cron_status', models.CharField(default='2', help_text='定时任务状态：1.启动，2.未启动', max_length=100, null=True, verbose_name='定时任务状态')),
                ('workwx_user_group_id', models.IntegerField(null=True, verbose_name='企业微信用户组id')),
                ('workwx_user_group_title', models.CharField(max_length=100, null=True, verbose_name='企业微信用户组标题')),
                ('workwx_group_chat_id', models.IntegerField(null=True, verbose_name='企业微信群聊id')),
                ('workwx_group_chat_title', models.CharField(max_length=100, null=True, verbose_name='企业微信群聊标题')),
                ('isValid', models.BooleanField(default=True, verbose_name='测试内容是否有效')),
                ('msg', models.CharField(max_length=500, null=True, verbose_name='测试内容错误信息')),
                ('project', models.ForeignKey(default='1', on_delete=django.db.models.deletion.PROTECT, to='api.ApiProject')),
            ],
            options={
                'verbose_name': '报表测试任务',
                'verbose_name_plural': '报表测试任务',
                'db_table': 'api_rf_task',
            },
            managers=[
                ('m', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='RFTaskResult',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='标题', max_length=100, verbose_name='标题')),
                ('isDelete', models.BooleanField(default=False, help_text='逻辑删除', verbose_name='逻辑删除')),
                ('create_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人')),
                ('create_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人id')),
                ('latest_update_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者名称')),
                ('latest_update_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者id')),
                ('c_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('u_date', models.DateTimeField(auto_now=True, null=True, verbose_name='修改时间')),
                ('rf_task_id', models.CharField(max_length=100, null=True, verbose_name='关联测试任务id')),
                ('project_id', models.CharField(max_length=100, null=True, verbose_name='所属项目id')),
                ('trigger_way', models.CharField(help_text='执行方式:定时任务/手动测试', max_length=100, null=True, verbose_name='执行方式')),
                ('report', models.TextField(null=True, verbose_name='测试报告统计信息')),
                ('success_count', models.CharField(max_length=100, null=True, verbose_name='关联测试任务id')),
                ('fail_count', models.CharField(max_length=100, null=True, verbose_name='关联测试任务id')),
                ('test_ret', models.BooleanField(default=None, null=True, verbose_name='测试结果')),
                ('flag', models.BooleanField(default=True, null=True, verbose_name='测试任务是否正常完成')),
                ('erro_msg', models.CharField(max_length=1000, null=True, verbose_name='导致测试任务无法正常完成的错误信息')),
                ('send_workwx_user_group_flag', models.BooleanField(default=None, null=True, verbose_name='企业微信发送标识')),
                ('send_workwx_user_group_msg', models.CharField(max_length=1000, null=True, verbose_name='企业微信发送信息(错误信息)')),
                ('send_workwx_group_chat_flag', models.BooleanField(default=None, null=True, verbose_name='企业微信发送标识')),
                ('send_workwx_group_chat_msg', models.CharField(max_length=1000, null=True, verbose_name='企业微信发送信息(错误信息)')),
                ('send_email_flag', models.BooleanField(default=None, null=True, verbose_name='邮件发送标识')),
                ('send_email_msg', models.CharField(max_length=1000, null=True, verbose_name='邮件发送信息(错误信息)')),
                ('execution_time', models.CharField(max_length=100, null=True, verbose_name='执行时长')),
            ],
            options={
                'verbose_name': '报表测试任务_结果',
                'verbose_name_plural': '报表测试任务_结果',
                'db_table': 'api_rf_task_result',
            },
            managers=[
                ('m', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='TestReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('isDelete', models.BooleanField(default=False, help_text='逻辑删除', verbose_name='逻辑删除')),
                ('create_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人')),
                ('create_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人id')),
                ('latest_update_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者名称')),
                ('latest_update_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者id')),
                ('c_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('u_date', models.DateTimeField(auto_now=True, null=True, verbose_name='修改时间')),
                ('title', models.CharField(max_length=100, null=True, verbose_name='标题')),
                ('task_id', models.CharField(max_length=100, null=True, verbose_name='关联测试任务id')),
                ('task_group_id', models.CharField(max_length=100, null=True, verbose_name='关联测试任务组id')),
                ('report', models.TextField(null=True, verbose_name='测试报告统计信息')),
                ('global_env_id', models.CharField(max_length=100, null=True, verbose_name='全局环境id')),
                ('global_env_title', models.CharField(max_length=100, null=True, verbose_name='全局环境标题')),
                ('global_host', models.CharField(max_length=100, null=True, verbose_name='全局域名')),
                ('test_type', models.CharField(max_length=100, null=True, verbose_name='测试类型')),
                ('test_ret', models.BooleanField(default=None, null=True, verbose_name='测试结果')),
                ('project_id', models.CharField(max_length=100, null=True, verbose_name='所属项目id')),
                ('project_title', models.CharField(max_length=100, null=True, verbose_name='所属项目标题')),
                ('trigger_way', models.CharField(help_text='执行方式:定时任务/手动测试', max_length=100, null=True, verbose_name='执行方式')),
                ('send_workwx_user_group_flag', models.BooleanField(default=None, null=True, verbose_name='企业微信发送标识')),
                ('send_workwx_user_group_msg', models.CharField(max_length=1000, null=True, verbose_name='企业微信发送信息(错误信息)')),
                ('send_workwx_group_chat_flag', models.BooleanField(default=None, null=True, verbose_name='企业微信发送标识')),
                ('send_workwx_group_chat_msg', models.CharField(max_length=1000, null=True, verbose_name='企业微信发送信息(错误信息)')),
                ('send_email_flag', models.BooleanField(default=None, null=True, verbose_name='邮件发送标识')),
                ('send_email_msg', models.CharField(max_length=1000, null=True, verbose_name='邮件发送信息(错误信息)')),
                ('flag', models.BooleanField(default=None, null=True, verbose_name='测试任务是否正常完成')),
                ('erro_msg', models.CharField(max_length=1000, null=True, verbose_name='导致测试任务无法正常完成的错误信息')),
                ('execution_time', models.CharField(max_length=100, null=True, verbose_name='执行时长')),
            ],
            options={
                'verbose_name': '测试报告',
                'verbose_name_plural': '测试报告',
                'db_table': 'api_test_report',
            },
            managers=[
                ('m', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='TestReportDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('isDelete', models.BooleanField(default=False, help_text='逻辑删除', verbose_name='逻辑删除')),
                ('create_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人')),
                ('create_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人id')),
                ('latest_update_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者名称')),
                ('latest_update_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者id')),
                ('c_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('u_date', models.DateTimeField(auto_now=True, null=True, verbose_name='修改时间')),
                ('title', models.CharField(max_length=100, null=True, verbose_name='标题')),
                ('report_id', models.CharField(max_length=100, null=True, verbose_name='关联报告id')),
                ('api_id', models.CharField(max_length=100, null=True, verbose_name='接口id')),
                ('api_title', models.CharField(max_length=100, null=True, verbose_name='接口名称')),
                ('api_desc', models.CharField(max_length=500, null=True, verbose_name='接口描述')),
                ('method', models.CharField(max_length=100, null=True, verbose_name='请求方式')),
                ('case_id', models.CharField(max_length=100, null=True, verbose_name='用例id')),
                ('case_title', models.CharField(max_length=500, verbose_name='用例描述')),
                ('final_ret', models.BooleanField(null=True, verbose_name='测试结果')),
                ('case_info', models.TextField(null=True, verbose_name='测试详情数据')),
            ],
            options={
                'verbose_name': '测试报告详情用例数据',
                'verbose_name_plural': '测试报告详情用例数据',
                'db_table': 'api_test_report_detail',
            },
            managers=[
                ('m', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='TestTask',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='标题', max_length=100, verbose_name='标题')),
                ('isDelete', models.BooleanField(default=False, help_text='逻辑删除', verbose_name='逻辑删除')),
                ('create_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人')),
                ('create_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人id')),
                ('latest_update_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者名称')),
                ('latest_update_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者id')),
                ('c_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('u_date', models.DateTimeField(auto_now=True, null=True, verbose_name='修改时间')),
                ('task_desc', models.CharField(max_length=500, verbose_name='测试任务描述')),
                ('test_type', models.CharField(help_text='测试策略：1全量，2冒烟，3场景', max_length=100, null=True, verbose_name='测试策略')),
                ('global_env_id_list', models.CharField(max_length=1000, null=True, verbose_name='全局环境id列表')),
                ('global_host_id', models.IntegerField(null=True, verbose_name='全局域名id')),
                ('global_host_title', models.CharField(max_length=100, null=True, verbose_name='全局域名标题')),
                ('global_variable_id', models.IntegerField(null=True, verbose_name='全局变量id')),
                ('global_variable_title', models.CharField(max_length=100, null=True, verbose_name='全局变量标题')),
                ('global_header_id', models.IntegerField(null=True, verbose_name='全局请求头id')),
                ('global_header_title', models.CharField(max_length=100, null=True, verbose_name='全局请求头标题')),
                ('global_cookie_id', models.IntegerField(null=True, verbose_name='全局cookie_id')),
                ('global_cookie_title', models.CharField(max_length=100, null=True, verbose_name='全局cookie标题')),
                ('project_id', models.CharField(max_length=100, null=True, verbose_name='项目id')),
                ('project_title', models.CharField(max_length=500, null=True, verbose_name='项目名称')),
                ('group_ids', models.CharField(help_text='分组id用,分割', max_length=1000, null=True, verbose_name='分组id')),
                ('group_title_list', models.TextField(help_text='分组名称 json-list格式', null=True, verbose_name='分组名称')),
                ('api_ids', models.CharField(help_text='接口id用,分割', max_length=1000, null=True, verbose_name='接口id')),
                ('api_title_list', models.TextField(help_text='接口名称 json-list格式', null=True, verbose_name='接口名称')),
                ('case_ids', models.CharField(help_text='用例id用,分割', max_length=4000, null=True, verbose_name='用例id')),
                ('case_title_list', models.TextField(help_text='用例名称 json-list格式', null=True, verbose_name='用例名称')),
                ('cron', models.CharField(help_text='cron表达式', max_length=100, null=True, verbose_name='cron表达式')),
                ('next_execute_time', models.CharField(max_length=100, null=True, verbose_name='定时任务下次执行时间')),
                ('cron_status', models.CharField(default='2', help_text='定时任务状态：1.启动，2.未启动', max_length=100, null=True, verbose_name='定时任务状态')),
                ('workwx_user_group_id', models.IntegerField(null=True, verbose_name='企业微信用户组id')),
                ('workwx_user_group_title', models.CharField(max_length=100, null=True, verbose_name='企业微信用户组标题')),
                ('workwx_group_chat_id', models.IntegerField(null=True, verbose_name='企业微信群聊id')),
                ('workwx_group_chat_title', models.CharField(max_length=100, null=True, verbose_name='企业微信群聊标题')),
                ('email_user_group_id', models.IntegerField(null=True, verbose_name='邮箱组')),
                ('email_user_group_title', models.CharField(max_length=100, null=True, verbose_name='邮箱组')),
                ('isValid', models.BooleanField(default=True, help_text='测试内容是否有效', verbose_name='测试内容是否有效')),
                ('msg', models.CharField(help_text='测试内容错误信息', max_length=500, null=True, verbose_name='测试内容错误信息')),
            ],
            options={
                'verbose_name': '测试任务',
                'verbose_name_plural': '测试任务',
                'db_table': 'api_test_task',
            },
            managers=[
                ('m', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='TestTaskGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='标题', max_length=100, verbose_name='标题')),
                ('isDelete', models.BooleanField(default=False, help_text='逻辑删除', verbose_name='逻辑删除')),
                ('create_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人')),
                ('create_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人id')),
                ('latest_update_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者名称')),
                ('latest_update_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者id')),
                ('c_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('u_date', models.DateTimeField(auto_now=True, null=True, verbose_name='修改时间')),
                ('project_id', models.CharField(max_length=100, null=True, verbose_name='项目id')),
                ('project_title', models.CharField(max_length=500, null=True, verbose_name='项目名称')),
                ('desc', models.CharField(max_length=500, verbose_name='测试任务组描述')),
                ('test_task_id_list', models.CharField(max_length=100, null=True, verbose_name='测试任务id')),
                ('content', models.CharField(max_length=4000, null=True, verbose_name='任务内容')),
                ('cron', models.CharField(default='', max_length=500, null=True, verbose_name='cron表达式')),
                ('cron_status', models.CharField(default='2', help_text='定时任务状态：1.启动，2.未启动', max_length=100, null=True, verbose_name='定时任务状态')),
                ('isValid', models.BooleanField(default=True, verbose_name='测试任务id是否有效')),
                ('erro_msg', models.CharField(default='', max_length=1000, null=True, verbose_name='测试任务无效错误信息')),
                ('unified_receive_config', models.BooleanField(default=True, verbose_name='统一使用任务组的报告接收配置')),
                ('workwx_user_group_id', models.IntegerField(null=True, verbose_name='企业微信用户组id')),
                ('workwx_user_group_title', models.CharField(max_length=100, null=True, verbose_name='企业微信用户组标题')),
                ('workwx_group_chat_id', models.IntegerField(null=True, verbose_name='企业微信群聊id')),
                ('workwx_group_chat_title', models.CharField(max_length=100, null=True, verbose_name='企业微信群聊标题')),
                ('email_user_group_id', models.IntegerField(null=True, verbose_name='企业微信应用id')),
                ('email_user_group_title', models.CharField(max_length=100, null=True, verbose_name='企业微信应用标题')),
            ],
            options={
                'verbose_name': '测试任务组',
                'verbose_name_plural': '测试任务组',
                'db_table': 'api_test_task_group',
            },
            managers=[
                ('m', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='WorkWXApply',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='标题', max_length=100, verbose_name='标题')),
                ('isDelete', models.BooleanField(default=False, help_text='逻辑删除', verbose_name='逻辑删除')),
                ('create_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人')),
                ('create_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人id')),
                ('latest_update_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者名称')),
                ('latest_update_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者id')),
                ('c_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('u_date', models.DateTimeField(auto_now=True, null=True, verbose_name='修改时间')),
                ('desc', models.CharField(blank=True, max_length=100, null=True, verbose_name='描述')),
                ('corpid', models.CharField(blank=True, max_length=100, null=True, verbose_name='公司id')),
                ('corpsecret', models.CharField(blank=True, max_length=100, null=True, verbose_name=' 应用的凭证密钥')),
                ('agentid', models.CharField(blank=True, max_length=100, null=True, verbose_name='应用id')),
                ('token', models.CharField(blank=True, max_length=500, null=True, verbose_name='应用的token')),
            ],
            options={
                'verbose_name': '企业微信应用配置',
                'verbose_name_plural': '企业微信应用配置',
                'db_table': 'workwx_apply',
            },
            managers=[
                ('m', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='WorkWxGroupChat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='标题', max_length=100, verbose_name='标题')),
                ('isDelete', models.BooleanField(default=False, help_text='逻辑删除', verbose_name='逻辑删除')),
                ('create_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人')),
                ('create_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人id')),
                ('latest_update_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者名称')),
                ('latest_update_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者id')),
                ('c_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('u_date', models.DateTimeField(auto_now=True, null=True, verbose_name='修改时间')),
                ('params', models.TextField(blank=True, help_text='群聊webhookurl，是群聊机器人的地址', null=True, verbose_name='群聊webhookurl')),
            ],
            options={
                'verbose_name': '企业微信群聊配置',
                'verbose_name_plural': '企业微信群聊配置',
                'db_table': 'workwx_group_chat',
            },
            managers=[
                ('m', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='WorkWxUserGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False)),
                ('title', models.CharField(help_text='标题', max_length=100, verbose_name='标题')),
                ('isDelete', models.BooleanField(default=False, help_text='逻辑删除', verbose_name='逻辑删除')),
                ('create_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人')),
                ('create_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='创建人id')),
                ('latest_update_user', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者名称')),
                ('latest_update_user_id', models.CharField(blank=True, max_length=100, null=True, verbose_name='最后更新者id')),
                ('c_date', models.DateTimeField(auto_now_add=True, null=True, verbose_name='创建时间')),
                ('u_date', models.DateTimeField(auto_now=True, null=True, verbose_name='修改时间')),
                ('params', models.TextField(blank=True, help_text='用|分割，比如guojing02|cuiyongjian', null=True, verbose_name='用户名列表')),
            ],
            options={
                'verbose_name': '企业微信用户组配置',
                'verbose_name_plural': '企业微信用户组配置',
                'db_table': 'workWX_user_group',
            },
            managers=[
                ('m', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name='globalenv',
            name='global_header',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='api.GlobalHeader', verbose_name='全局请求头'),
        ),
        migrations.AddField(
            model_name='globalenv',
            name='global_host',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='api.GlobalHost', verbose_name='全局域名'),
        ),
        migrations.AddField(
            model_name='globalenv',
            name='global_variable',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.PROTECT, to='api.GlobalVariable', verbose_name='全局变量'),
        ),
        migrations.AddField(
            model_name='globalenv',
            name='project',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='api.ApiProject', verbose_name='所属项目'),
        ),
        migrations.AddField(
            model_name='apigroup',
            name='project',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.ApiProject'),
        ),
        migrations.AddField(
            model_name='apiapi',
            name='group',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='api.ApiGroup'),
        ),
    ]
